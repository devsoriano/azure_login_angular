{"version":3,"file":"azure-msal-angular.js","sources":["../../src/constants.ts","../../src/packageMetadata.ts","../../src/msal.service.ts","../../src/msal.guard.ts","../../src/msal.interceptor.ts","../../src/msal.broadcast.service.ts","../../src/msal.module.ts","../../src/msal.redirect.component.ts","../../src/public-api.ts","../../src/azure-msal-angular.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { InjectionToken } from \"@angular/core\";\r\n\r\nexport const MSAL_INSTANCE = new InjectionToken<string>(\"MSAL_INSTANCE\");\r\n\r\nexport const MSAL_GUARD_CONFIG = new InjectionToken<string>(\"MSAL_GUARD_CONFIG\");\r\n\r\nexport const MSAL_INTERCEPTOR_CONFIG = new InjectionToken<string>(\"MSAL_INTERCEPTOR_CONFIG\");\r\n","/* eslint-disable header/header */\nexport const name = \"@azure/msal-angular\";\nexport const version = \"2.0.0-alpha.6\";\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Inject, Injectable } from \"@angular/core\";\r\nimport { Location } from \"@angular/common\";\r\nimport {\r\n    IPublicClientApplication,\r\n    EndSessionRequest,\r\n    AuthenticationResult,\r\n    RedirectRequest,\r\n    SilentRequest,\r\n    PopupRequest,\r\n    SsoSilentRequest,\r\n    Logger,\r\n    WrapperSKU\r\n} from \"@azure/msal-browser\";\r\nimport { MSAL_INSTANCE } from \"./constants\";\r\nimport { Observable, from } from \"rxjs\";\r\nimport { IMsalService } from \"./IMsalService\";\r\nimport { name, version } from \"./packageMetadata\";\r\n\r\n@Injectable()\r\nexport class MsalService implements IMsalService {\r\n    private redirectHash: string;\r\n    private logger: Logger;\r\n\r\n    constructor(\r\n        @Inject(MSAL_INSTANCE) public instance: IPublicClientApplication,\r\n        private location: Location\r\n    ) {\r\n        const hash = this.location.path(true).split(\"#\").pop();\r\n        if (hash) {\r\n            this.redirectHash = `#${hash}`;\r\n        }\r\n        this.instance.initializeWrapperLibrary(WrapperSKU.Angular, version);\r\n    }\r\n\r\n    acquireTokenPopup(request: PopupRequest): Observable<AuthenticationResult> {\r\n        return from(this.instance.acquireTokenPopup(request));\r\n    }\r\n    acquireTokenRedirect(request: RedirectRequest): Observable<void> {\r\n        return from(this.instance.acquireTokenRedirect(request));\r\n    }\r\n    acquireTokenSilent(silentRequest: SilentRequest): Observable<AuthenticationResult> {\r\n        return from(this.instance.acquireTokenSilent(silentRequest));\r\n    }\r\n    handleRedirectObservable(): Observable<AuthenticationResult> {\r\n        const handleRedirect = from(this.instance.handleRedirectPromise(this.redirectHash));\r\n        this.redirectHash = \"\";\r\n        return handleRedirect;\r\n    }\r\n    loginPopup(request?: PopupRequest): Observable<AuthenticationResult> {\r\n        return from(this.instance.loginPopup(request));\r\n    }\r\n    loginRedirect(request?: RedirectRequest): Observable<void> {\r\n        return from(this.instance.loginRedirect(request));\r\n    }\r\n    logout(logoutRequest?: EndSessionRequest): Observable<void> {\r\n        return from(this.instance.logout(logoutRequest));\r\n    }\r\n    ssoSilent(request: SsoSilentRequest): Observable<AuthenticationResult> {\r\n        return from(this.instance.ssoSilent(request));\r\n    }\r\n    /**\r\n     * Gets logger for msal-angular.\r\n     * If no logger set, returns logger instance created with same options as msal-browser\r\n     */\r\n    getLogger(): Logger {\r\n        if (!this.logger) {\r\n            this.logger = this.instance.getLogger().clone(name, version);\r\n        }\r\n        return this.logger;\r\n    }\r\n    // Create a logger instance for msal-angular with the same options as msal-browser\r\n    setLogger(logger: Logger): void {\r\n        this.logger = logger.clone(name, version);\r\n        this.instance.setLogger(logger);\r\n    }\r\n\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, CanActivateChild, CanLoad, UrlTree, Router } from \"@angular/router\";\r\nimport { MsalService } from \"./msal.service\";\r\nimport { Injectable, Inject, VERSION } from \"@angular/core\";\r\nimport { Location } from \"@angular/common\";\r\nimport { InteractionType, BrowserConfigurationAuthError, BrowserUtils, UrlString, PopupRequest, RedirectRequest, AuthenticationResult } from \"@azure/msal-browser\";\r\nimport { MsalGuardConfiguration } from \"./msal.guard.config\";\r\nimport { MSAL_GUARD_CONFIG } from \"./constants\";\r\nimport { concatMap, catchError, map } from \"rxjs/operators\";\r\nimport { Observable, of } from \"rxjs\";\r\n\r\n@Injectable()\r\nexport class MsalGuard implements CanActivate, CanActivateChild, CanLoad {\r\n    private loginFailedRoute?: UrlTree;\r\n\r\n    constructor(\r\n        @Inject(MSAL_GUARD_CONFIG) private msalGuardConfig: MsalGuardConfiguration,\r\n        private authService: MsalService,\r\n        private location: Location,\r\n        private router: Router\r\n    ) { }\r\n\r\n    /**\r\n     * Parses url string to UrlTree\r\n     * @param url \r\n     */\r\n    parseUrl(url: string): UrlTree {\r\n        return this.router.parseUrl(url);\r\n    }\r\n\r\n    /**\r\n     * Builds the absolute url for the destination page\r\n     * @param path Relative path of requested page\r\n     * @returns Full destination url\r\n     */\r\n    getDestinationUrl(path: string): string {\r\n        this.authService.getLogger().verbose(\"Guard - getting destination url\");\r\n        // Absolute base url for the application (default to origin if base element not present)\r\n        const baseElements = document.getElementsByTagName(\"base\");\r\n        const baseUrl = this.location.normalize(baseElements.length ? baseElements[0].href : window.location.origin);\r\n\r\n        // Path of page (including hash, if using hash routing)\r\n        const pathUrl = this.location.prepareExternalUrl(path);\r\n\r\n        // Hash location strategy\r\n        if (pathUrl.startsWith(\"#\")) {\r\n            this.authService.getLogger().verbose(\"Guard - destination by hash routing\");\r\n            return `${baseUrl}/${pathUrl}`;\r\n        }\r\n\r\n        /*\r\n         * If using path location strategy, pathUrl will include the relative portion of the base path (e.g. /base/page).\r\n         * Since baseUrl also includes /base, can just concatentate baseUrl + path\r\n         */\r\n        return `${baseUrl}${path}`;\r\n    }\r\n\r\n    /**\r\n     * Interactively prompt the user to login\r\n     * @param url Path of the requested page\r\n     */\r\n    private loginInteractively(url: string): Observable<boolean> {\r\n        if (this.msalGuardConfig.interactionType === InteractionType.Popup) {\r\n            this.authService.getLogger().verbose(\"Guard - logging in by popup\");\r\n            return this.authService.loginPopup({ ...this.msalGuardConfig.authRequest } as PopupRequest)\r\n                .pipe(\r\n                    map((response: AuthenticationResult) => {\r\n                        this.authService.getLogger().verbose(\"Guard - login by popup successful, can activate, setting active account\");\r\n                        this.authService.instance.setActiveAccount(response.account);\r\n                        return true;\r\n                    })\r\n                );\r\n        }\r\n\r\n        this.authService.getLogger().verbose(\"Guard - logging in by redirect\");\r\n        const redirectStartPage = this.getDestinationUrl(url);\r\n        return this.authService.loginRedirect({\r\n            redirectStartPage,\r\n            ...this.msalGuardConfig.authRequest\r\n        } as RedirectRequest)\r\n            .pipe(\r\n                map(() => false)\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Helper which checks for the correct interaction type, prevents page with Guard to be set as reidrect, and calls handleRedirectObservable\r\n     * @param state \r\n     */\r\n    private activateHelper(state?: RouterStateSnapshot): Observable<boolean|UrlTree> {\r\n        if (this.msalGuardConfig.interactionType !== InteractionType.Popup && this.msalGuardConfig.interactionType !== InteractionType.Redirect) {\r\n            throw new BrowserConfigurationAuthError(\"invalid_interaction_type\", \"Invalid interaction type provided to MSAL Guard. InteractionType.Popup or InteractionType.Redirect must be provided in the MsalGuardConfiguration\");\r\n        }\r\n        this.authService.getLogger().verbose(\"MSAL Guard activated\");\r\n\r\n        /*\r\n         * If a page with MSAL Guard is set as the redirect for acquireTokenSilent,\r\n         * short-circuit to prevent redirecting or popups.\r\n         * TODO: Update to allow running in iframe once allowRedirectInIframe is implemented\r\n         */\r\n        if (UrlString.hashContainsKnownProperties(window.location.hash) && BrowserUtils.isInIframe()) {\r\n            this.authService.getLogger().warning(\"Guard - redirectUri set to page with MSAL Guard. It is recommended to not set redirectUri to a page that requires authentication.\");\r\n            return of(false);\r\n        }\r\n\r\n        /**\r\n         * If a loginFailedRoute is set in the config, set this as the loginFailedRoute\r\n         */\r\n        if (this.msalGuardConfig.loginFailedRoute) {\r\n            this.loginFailedRoute = this.parseUrl(this.msalGuardConfig.loginFailedRoute);\r\n        }\r\n\r\n        return this.authService.handleRedirectObservable()\r\n            .pipe(\r\n                concatMap(() => {\r\n                    if (!this.authService.instance.getAllAccounts().length) {\r\n                        if (state) {\r\n                            this.authService.getLogger().verbose(\"Guard - no accounts retrieved, log in required to activate\");\r\n                            return this.loginInteractively(state.url);\r\n                        } \r\n                        this.authService.getLogger().verbose(\"Guard - no accounts retrieved, no state, cannot load\");\r\n                        return of(false);\r\n                    }\r\n                    this.authService.getLogger().verbose(\"Guard - account retrieved, can activate or load\");\r\n                    return of(true);\r\n                }),\r\n                catchError(() => {\r\n                    this.authService.getLogger().verbose(\"Guard - error while logging in, unable to activate\");\r\n                    /**\r\n                     * If a loginFailedRoute is set, checks to see if Angular 10+ is used and state is passed in before returning route\r\n                     * Apps using Angular 9 will receive of(false) in canLoad interface, as it does not support UrlTree return types\r\n                     */\r\n                    if (this.loginFailedRoute && parseInt(VERSION.major, 10) > 9 && state) {\r\n                        this.authService.getLogger().verbose(\"Guard - loginFailedRoute set, redirecting\");\r\n                        return of(this.loginFailedRoute);\r\n                    }\r\n                    return of(false);\r\n                })\r\n            );\r\n    }\r\n\r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean|UrlTree> {\r\n        this.authService.getLogger().verbose(\"Guard - canActivate\");\r\n        return this.activateHelper(state);\r\n    }\r\n\r\n    canActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean|UrlTree> {\r\n        this.authService.getLogger().verbose(\"Guard - canActivateChild\");\r\n        return this.activateHelper(state);\r\n    }\r\n\r\n    canLoad(): Observable<boolean> {\r\n        this.authService.getLogger().verbose(\"Guard - canLoad\");\r\n        // @ts-ignore\r\n        return this.activateHelper();\r\n    }\r\n\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport {\r\n    HttpRequest,\r\n    HttpHandler,\r\n    HttpEvent,\r\n    HttpInterceptor\r\n} from \"@angular/common/http\";\r\nimport { Observable, EMPTY, of } from \"rxjs\";\r\nimport { switchMap, catchError } from \"rxjs/operators\";\r\nimport { MsalService } from \"./msal.service\";\r\nimport { AccountInfo, AuthenticationResult, BrowserConfigurationAuthError, InteractionType, StringUtils } from \"@azure/msal-browser\";\r\nimport { Injectable, Inject } from \"@angular/core\";\r\nimport { MSAL_INTERCEPTOR_CONFIG } from \"./constants\";\r\nimport { MsalInterceptorConfiguration } from \"./msal.interceptor.config\";\r\n\r\n@Injectable()\r\nexport class MsalInterceptor implements HttpInterceptor {\r\n    constructor(\r\n        @Inject(MSAL_INTERCEPTOR_CONFIG) private msalInterceptorConfig: MsalInterceptorConfiguration,\r\n        private authService: MsalService\r\n    ) {}\r\n\r\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        if (this.msalInterceptorConfig.interactionType !== InteractionType.Popup && this.msalInterceptorConfig.interactionType !== InteractionType.Redirect) {\r\n            throw new BrowserConfigurationAuthError(\"invalid_interaction_type\", \"Invalid interaction type provided to MSAL Interceptor. InteractionType.Popup, InteractionType.Redirect must be provided in the msalInterceptorConfiguration\");\r\n        }\r\n\r\n        this.authService.getLogger().verbose(\"MSAL Interceptor activated\");\r\n        const scopes = this.getScopesForEndpoint(req.url);\r\n\r\n        // Sets account as active account or first account\r\n        let account: AccountInfo;\r\n        if (!!this.authService.instance.getActiveAccount()) {\r\n            this.authService.getLogger().verbose(\"Interceptor - active account selected\");\r\n            account = this.authService.instance.getActiveAccount();\r\n        } else {\r\n            this.authService.getLogger().verbose(\"Interceptor - no active account, fallback to first account\");\r\n            account = this.authService.instance.getAllAccounts()[0];\r\n        }\r\n\r\n        // If no scopes for endpoint, does not acquire token\r\n        if (!scopes || scopes.length === 0) {\r\n            this.authService.getLogger().verbose(\"Interceptor - no scopes for endpoint\");\r\n            return next.handle(req);\r\n        }\r\n\r\n        this.authService.getLogger().info(`Interceptor - ${scopes.length} scopes found for endpoint`);\r\n        this.authService.getLogger().infoPii(`Interceptor - [${scopes}] scopes found for ${req.url}`);\r\n\r\n        // Note: For MSA accounts, include openid scope when calling acquireTokenSilent to return idToken\r\n        return this.authService.acquireTokenSilent({...this.msalInterceptorConfig.authRequest, scopes, account})\r\n            .pipe(\r\n                catchError(() => {\r\n                    this.authService.getLogger().error(\"Interceptor - acquireTokenSilent rejected with error. Invoking interaction to resolve.\");\r\n                    return this.acquireTokenInteractively(scopes);\r\n                }),\r\n                switchMap((result: AuthenticationResult)  => {\r\n                    if (!result.accessToken) {\r\n                        this.authService.getLogger().error(\"Interceptor - acquireTokenSilent resolved with null access token. Known issue with B2C tenants, invoking interaction to resolve.\");\r\n                        return this.acquireTokenInteractively(scopes);\r\n                    }\r\n                    return of(result);\r\n                }),\r\n                switchMap((result: AuthenticationResult) => {\r\n                    this.authService.getLogger().verbose(\"Interceptor - setting authorization headers\");\r\n                    const headers = req.headers\r\n                        .set(\"Authorization\", `Bearer ${result.accessToken}`);\r\n\r\n                    const requestClone = req.clone({headers});\r\n                    return next.handle(requestClone);\r\n                })\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Invoke interaction for the given set of scopes\r\n     * @param scopes Array of scopes for the request\r\n     * @returns Result from the interactive request\r\n     */\r\n    private acquireTokenInteractively(scopes: string[]): Observable<AuthenticationResult> {\r\n        if (this.msalInterceptorConfig.interactionType === InteractionType.Popup) {\r\n            this.authService.getLogger().verbose(\"Interceptor - error acquiring token silently, acquiring by popup\");\r\n            return this.authService.acquireTokenPopup({...this.msalInterceptorConfig.authRequest, scopes});\r\n        }\r\n        this.authService.getLogger().verbose(\"Interceptor - error acquiring token silently, acquiring by redirect\");\r\n        const redirectStartPage = window.location.href;\r\n        this.authService.acquireTokenRedirect({...this.msalInterceptorConfig.authRequest, scopes, redirectStartPage});\r\n        return EMPTY;\r\n    }\r\n\r\n    /**\r\n     * Looks up the scopes for the given endpoint from the protectedResourceMap\r\n     * @param endpoint Url of the request\r\n     * @returns Array of scopes, or null if not found\r\n     *\r\n     */\r\n    private getScopesForEndpoint(endpoint: string): Array<string>|null {\r\n        this.authService.getLogger().verbose(\"Interceptor - getting scopes for endpoint\");\r\n        const protectedResourcesArray = Array.from(this.msalInterceptorConfig.protectedResourceMap.keys());\r\n        const keyMatchesEndpointArray = protectedResourcesArray.filter(key => {\r\n            return StringUtils.matchPattern(key, endpoint);\r\n        });\r\n\r\n        // Process all protected resources and send the first matched resource\r\n        if (keyMatchesEndpointArray.length > 0) {\r\n            const keyForEndpoint = keyMatchesEndpointArray[0];\r\n            if (keyForEndpoint) {\r\n                return this.msalInterceptorConfig.protectedResourceMap.get(keyForEndpoint);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Inject, Injectable } from \"@angular/core\";\r\nimport { Observable, Subject } from \"rxjs\";\r\nimport { MSAL_INSTANCE } from \"./constants\";\r\nimport { EventMessage, EventMessageUtils, IPublicClientApplication, InteractionStatus } from \"@azure/msal-browser\";\r\n\r\n@Injectable()\r\nexport class MsalBroadcastService {\r\n    private _msalSubject: Subject<EventMessage>;\r\n    public msalSubject$: Observable<EventMessage>;\r\n    private _inProgress: Subject<InteractionStatus>;\r\n    public inProgress$: Observable<InteractionStatus>;\r\n\r\n    constructor(\r\n        @Inject(MSAL_INSTANCE) private msalInstance: IPublicClientApplication\r\n    ) {\r\n        this._msalSubject = new Subject<EventMessage>();\r\n        this.msalSubject$  = this._msalSubject.asObservable();\r\n        this._inProgress = new Subject<InteractionStatus>();\r\n        this.inProgress$ = this._inProgress.asObservable();\r\n        this.msalInstance.addEventCallback((message: EventMessage) => {\r\n            this._msalSubject.next(message);\r\n            const status = EventMessageUtils.getInteractionStatusFromEvent(message);\r\n            if (status !== null) {\r\n                this.msalInstance.getLogger().verbose(`BroadcastService - ${message.eventType} results in setting inProgress to ${status}`);\r\n                this._inProgress.next(status);\r\n            }\r\n        });\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ModuleWithProviders, NgModule } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { IPublicClientApplication } from \"@azure/msal-browser\";\r\nimport { MsalGuardConfiguration } from \"./msal.guard.config\";\r\nimport { MsalInterceptorConfiguration } from \"./msal.interceptor.config\";\r\nimport { MsalGuard } from \"./msal.guard\";\r\nimport { MsalBroadcastService } from \"./msal.broadcast.service\";\r\nimport { MsalService } from \"./msal.service\";\r\nimport { MSAL_INSTANCE , MSAL_GUARD_CONFIG, MSAL_INTERCEPTOR_CONFIG } from \"./constants\";\r\n\r\n@NgModule({\r\n    declarations: [],\r\n    imports: [\r\n        CommonModule\r\n    ],\r\n    providers: [\r\n        MsalGuard,\r\n        MsalBroadcastService\r\n    ]\r\n})\r\nexport class MsalModule {\r\n    static forRoot(\r\n        msalInstance: IPublicClientApplication,\r\n        guardConfig: MsalGuardConfiguration,\r\n        interceptorConfig: MsalInterceptorConfiguration\r\n    ): ModuleWithProviders<MsalModule> {\r\n        return {\r\n            ngModule: MsalModule,\r\n            providers: [\r\n                {\r\n                    provide: MSAL_INSTANCE,\r\n                    useValue: msalInstance\r\n                },\r\n                {\r\n                    provide: MSAL_GUARD_CONFIG,\r\n                    useValue: guardConfig\r\n                },\r\n                {\r\n                    provide: MSAL_INTERCEPTOR_CONFIG,\r\n                    useValue: interceptorConfig\r\n                },\r\n                MsalService\r\n            ]\r\n        };\r\n    }\r\n\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\n/**\r\n * This is a dedicated redirect component to be added to Angular apps to \r\n * handle redirects when using @azure/msal-angular.\r\n * Import this component to use redirects in your app.\r\n */\r\n\r\nimport { Component, OnInit } from \"@angular/core\";\r\nimport { MsalService } from \"./msal.service\";\r\n\r\n@Component({\r\n    selector: \"app-redirect\",\r\n    template: \"\"\r\n})\r\nexport class MsalRedirectComponent implements OnInit {\r\n\r\n    constructor(private authService: MsalService) { }\r\n\r\n    ngOnInit(): void {    \r\n        this.authService.handleRedirectObservable().subscribe();\r\n    }\r\n\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\n/**\r\n * @packageDocumentation\r\n * @module @azure/msal-angular\r\n */\r\n\r\nexport { MsalService } from \"./msal.service\";\r\nexport { IMsalService } from \"./IMsalService\";\r\nexport { MsalGuard } from \"./msal.guard\";\r\nexport { MsalGuardConfiguration } from \"./msal.guard.config\";\r\nexport { MsalInterceptor } from \"./msal.interceptor\";\r\nexport { MsalInterceptorConfiguration } from \"./msal.interceptor.config\";\r\nexport { MSAL_INSTANCE, MSAL_GUARD_CONFIG, MSAL_INTERCEPTOR_CONFIG } from \"./constants\";\r\nexport { MsalBroadcastService } from \"./msal.broadcast.service\";\r\nexport { MsalModule } from \"./msal.module\";\r\nexport { MsalRedirectComponent } from \"./msal.redirect.component\";\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}