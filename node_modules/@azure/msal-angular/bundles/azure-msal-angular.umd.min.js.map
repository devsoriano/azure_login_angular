{"version":3,"sources":["../../src/constants.ts","../../src/packageMetadata.ts","../../src/msal.service.ts","../../src/msal.guard.ts","../../src/msal.interceptor.ts","../../src/msal.broadcast.service.ts","../../src/msal.module.ts","../../src/msal.redirect.component.ts"],"names":["MSAL_INSTANCE","InjectionToken","MSAL_GUARD_CONFIG","MSAL_INTERCEPTOR_CONFIG","name","version","MsalService","instance","location","this","hash","path","split","pop","redirectHash","initializeWrapperLibrary","WrapperSKU","Angular","prototype","acquireTokenPopup","request","from","acquireTokenRedirect","acquireTokenSilent","silentRequest","handleRedirectObservable","handleRedirect","handleRedirectPromise","loginPopup","loginRedirect","logout","logoutRequest","ssoSilent","getLogger","logger","clone","setLogger","Injectable","Inject","args","Location","MsalGuard","msalGuardConfig","authService","router","parseUrl","url","getDestinationUrl","verbose","baseElements","document","getElementsByTagName","baseUrl","normalize","length","href","window","origin","pathUrl","prepareExternalUrl","startsWith","loginInteractively","_this","interactionType","InteractionType","Popup","Object","assign","authRequest","pipe","map","response","setActiveAccount","account","redirectStartPage","activateHelper","state","Redirect","BrowserConfigurationAuthError","UrlString","hashContainsKnownProperties","BrowserUtils","isInIframe","warning","of","loginFailedRoute","concatMap","getAllAccounts","catchError","parseInt","VERSION","major","canActivate","route","canActivateChild","canLoad","Router","MsalInterceptor","msalInterceptorConfig","intercept","req","next","scopes","getScopesForEndpoint","getActiveAccount","info","infoPii","error","acquireTokenInteractively","switchMap","result","accessToken","headers","set","requestClone","handle","EMPTY","endpoint","keyMatchesEndpointArray","Array","protectedResourceMap","keys","filter","key","StringUtils","matchPattern","keyForEndpoint","get","msalInstance","_msalSubject","Subject","msalSubject$","asObservable","_inProgress","inProgress$","addEventCallback","message","status","EventMessageUtils","getInteractionStatusFromEvent","eventType","MsalModule","forRoot","guardConfig","interceptorConfig","ngModule","providers","provide","useValue","NgModule","declarations","imports","CommonModule","MsalBroadcastService","MsalRedirectComponent","ngOnInit","subscribe","Component","selector","template"],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { InjectionToken } from \"@angular/core\";\r\n\r\nexport const MSAL_INSTANCE = new InjectionToken<string>(\"MSAL_INSTANCE\");\r\n\r\nexport const MSAL_GUARD_CONFIG = new InjectionToken<string>(\"MSAL_GUARD_CONFIG\");\r\n\r\nexport const MSAL_INTERCEPTOR_CONFIG = new InjectionToken<string>(\"MSAL_INTERCEPTOR_CONFIG\");\r\n","/* eslint-disable header/header */\nexport const name = \"@azure/msal-angular\";\nexport const version = \"2.0.0-alpha.6\";\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Inject, Injectable } from \"@angular/core\";\r\nimport { Location } from \"@angular/common\";\r\nimport {\r\n    IPublicClientApplication,\r\n    EndSessionRequest,\r\n    AuthenticationResult,\r\n    RedirectRequest,\r\n    SilentRequest,\r\n    PopupRequest,\r\n    SsoSilentRequest,\r\n    Logger,\r\n    WrapperSKU\r\n} from \"@azure/msal-browser\";\r\nimport { MSAL_INSTANCE } from \"./constants\";\r\nimport { Observable, from } from \"rxjs\";\r\nimport { IMsalService } from \"./IMsalService\";\r\nimport { name, version } from \"./packageMetadata\";\r\n\r\n@Injectable()\r\nexport class MsalService implements IMsalService {\r\n    private redirectHash: string;\r\n    private logger: Logger;\r\n\r\n    constructor(\r\n        @Inject(MSAL_INSTANCE) public instance: IPublicClientApplication,\r\n        private location: Location\r\n    ) {\r\n        const hash = this.location.path(true).split(\"#\").pop();\r\n        if (hash) {\r\n            this.redirectHash = `#${hash}`;\r\n        }\r\n        this.instance.initializeWrapperLibrary(WrapperSKU.Angular, version);\r\n    }\r\n\r\n    acquireTokenPopup(request: PopupRequest): Observable<AuthenticationResult> {\r\n        return from(this.instance.acquireTokenPopup(request));\r\n    }\r\n    acquireTokenRedirect(request: RedirectRequest): Observable<void> {\r\n        return from(this.instance.acquireTokenRedirect(request));\r\n    }\r\n    acquireTokenSilent(silentRequest: SilentRequest): Observable<AuthenticationResult> {\r\n        return from(this.instance.acquireTokenSilent(silentRequest));\r\n    }\r\n    handleRedirectObservable(): Observable<AuthenticationResult> {\r\n        const handleRedirect = from(this.instance.handleRedirectPromise(this.redirectHash));\r\n        this.redirectHash = \"\";\r\n        return handleRedirect;\r\n    }\r\n    loginPopup(request?: PopupRequest): Observable<AuthenticationResult> {\r\n        return from(this.instance.loginPopup(request));\r\n    }\r\n    loginRedirect(request?: RedirectRequest): Observable<void> {\r\n        return from(this.instance.loginRedirect(request));\r\n    }\r\n    logout(logoutRequest?: EndSessionRequest): Observable<void> {\r\n        return from(this.instance.logout(logoutRequest));\r\n    }\r\n    ssoSilent(request: SsoSilentRequest): Observable<AuthenticationResult> {\r\n        return from(this.instance.ssoSilent(request));\r\n    }\r\n    /**\r\n     * Gets logger for msal-angular.\r\n     * If no logger set, returns logger instance created with same options as msal-browser\r\n     */\r\n    getLogger(): Logger {\r\n        if (!this.logger) {\r\n            this.logger = this.instance.getLogger().clone(name, version);\r\n        }\r\n        return this.logger;\r\n    }\r\n    // Create a logger instance for msal-angular with the same options as msal-browser\r\n    setLogger(logger: Logger): void {\r\n        this.logger = logger.clone(name, version);\r\n        this.instance.setLogger(logger);\r\n    }\r\n\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, CanActivateChild, CanLoad, UrlTree, Router } from \"@angular/router\";\r\nimport { MsalService } from \"./msal.service\";\r\nimport { Injectable, Inject, VERSION } from \"@angular/core\";\r\nimport { Location } from \"@angular/common\";\r\nimport { InteractionType, BrowserConfigurationAuthError, BrowserUtils, UrlString, PopupRequest, RedirectRequest, AuthenticationResult } from \"@azure/msal-browser\";\r\nimport { MsalGuardConfiguration } from \"./msal.guard.config\";\r\nimport { MSAL_GUARD_CONFIG } from \"./constants\";\r\nimport { concatMap, catchError, map } from \"rxjs/operators\";\r\nimport { Observable, of } from \"rxjs\";\r\n\r\n@Injectable()\r\nexport class MsalGuard implements CanActivate, CanActivateChild, CanLoad {\r\n    private loginFailedRoute?: UrlTree;\r\n\r\n    constructor(\r\n        @Inject(MSAL_GUARD_CONFIG) private msalGuardConfig: MsalGuardConfiguration,\r\n        private authService: MsalService,\r\n        private location: Location,\r\n        private router: Router\r\n    ) { }\r\n\r\n    /**\r\n     * Parses url string to UrlTree\r\n     * @param url \r\n     */\r\n    parseUrl(url: string): UrlTree {\r\n        return this.router.parseUrl(url);\r\n    }\r\n\r\n    /**\r\n     * Builds the absolute url for the destination page\r\n     * @param path Relative path of requested page\r\n     * @returns Full destination url\r\n     */\r\n    getDestinationUrl(path: string): string {\r\n        this.authService.getLogger().verbose(\"Guard - getting destination url\");\r\n        // Absolute base url for the application (default to origin if base element not present)\r\n        const baseElements = document.getElementsByTagName(\"base\");\r\n        const baseUrl = this.location.normalize(baseElements.length ? baseElements[0].href : window.location.origin);\r\n\r\n        // Path of page (including hash, if using hash routing)\r\n        const pathUrl = this.location.prepareExternalUrl(path);\r\n\r\n        // Hash location strategy\r\n        if (pathUrl.startsWith(\"#\")) {\r\n            this.authService.getLogger().verbose(\"Guard - destination by hash routing\");\r\n            return `${baseUrl}/${pathUrl}`;\r\n        }\r\n\r\n        /*\r\n         * If using path location strategy, pathUrl will include the relative portion of the base path (e.g. /base/page).\r\n         * Since baseUrl also includes /base, can just concatentate baseUrl + path\r\n         */\r\n        return `${baseUrl}${path}`;\r\n    }\r\n\r\n    /**\r\n     * Interactively prompt the user to login\r\n     * @param url Path of the requested page\r\n     */\r\n    private loginInteractively(url: string): Observable<boolean> {\r\n        if (this.msalGuardConfig.interactionType === InteractionType.Popup) {\r\n            this.authService.getLogger().verbose(\"Guard - logging in by popup\");\r\n            return this.authService.loginPopup({ ...this.msalGuardConfig.authRequest } as PopupRequest)\r\n                .pipe(\r\n                    map((response: AuthenticationResult) => {\r\n                        this.authService.getLogger().verbose(\"Guard - login by popup successful, can activate, setting active account\");\r\n                        this.authService.instance.setActiveAccount(response.account);\r\n                        return true;\r\n                    })\r\n                );\r\n        }\r\n\r\n        this.authService.getLogger().verbose(\"Guard - logging in by redirect\");\r\n        const redirectStartPage = this.getDestinationUrl(url);\r\n        return this.authService.loginRedirect({\r\n            redirectStartPage,\r\n            ...this.msalGuardConfig.authRequest\r\n        } as RedirectRequest)\r\n            .pipe(\r\n                map(() => false)\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Helper which checks for the correct interaction type, prevents page with Guard to be set as reidrect, and calls handleRedirectObservable\r\n     * @param state \r\n     */\r\n    private activateHelper(state?: RouterStateSnapshot): Observable<boolean|UrlTree> {\r\n        if (this.msalGuardConfig.interactionType !== InteractionType.Popup && this.msalGuardConfig.interactionType !== InteractionType.Redirect) {\r\n            throw new BrowserConfigurationAuthError(\"invalid_interaction_type\", \"Invalid interaction type provided to MSAL Guard. InteractionType.Popup or InteractionType.Redirect must be provided in the MsalGuardConfiguration\");\r\n        }\r\n        this.authService.getLogger().verbose(\"MSAL Guard activated\");\r\n\r\n        /*\r\n         * If a page with MSAL Guard is set as the redirect for acquireTokenSilent,\r\n         * short-circuit to prevent redirecting or popups.\r\n         * TODO: Update to allow running in iframe once allowRedirectInIframe is implemented\r\n         */\r\n        if (UrlString.hashContainsKnownProperties(window.location.hash) && BrowserUtils.isInIframe()) {\r\n            this.authService.getLogger().warning(\"Guard - redirectUri set to page with MSAL Guard. It is recommended to not set redirectUri to a page that requires authentication.\");\r\n            return of(false);\r\n        }\r\n\r\n        /**\r\n         * If a loginFailedRoute is set in the config, set this as the loginFailedRoute\r\n         */\r\n        if (this.msalGuardConfig.loginFailedRoute) {\r\n            this.loginFailedRoute = this.parseUrl(this.msalGuardConfig.loginFailedRoute);\r\n        }\r\n\r\n        return this.authService.handleRedirectObservable()\r\n            .pipe(\r\n                concatMap(() => {\r\n                    if (!this.authService.instance.getAllAccounts().length) {\r\n                        if (state) {\r\n                            this.authService.getLogger().verbose(\"Guard - no accounts retrieved, log in required to activate\");\r\n                            return this.loginInteractively(state.url);\r\n                        } \r\n                        this.authService.getLogger().verbose(\"Guard - no accounts retrieved, no state, cannot load\");\r\n                        return of(false);\r\n                    }\r\n                    this.authService.getLogger().verbose(\"Guard - account retrieved, can activate or load\");\r\n                    return of(true);\r\n                }),\r\n                catchError(() => {\r\n                    this.authService.getLogger().verbose(\"Guard - error while logging in, unable to activate\");\r\n                    /**\r\n                     * If a loginFailedRoute is set, checks to see if Angular 10+ is used and state is passed in before returning route\r\n                     * Apps using Angular 9 will receive of(false) in canLoad interface, as it does not support UrlTree return types\r\n                     */\r\n                    if (this.loginFailedRoute && parseInt(VERSION.major, 10) > 9 && state) {\r\n                        this.authService.getLogger().verbose(\"Guard - loginFailedRoute set, redirecting\");\r\n                        return of(this.loginFailedRoute);\r\n                    }\r\n                    return of(false);\r\n                })\r\n            );\r\n    }\r\n\r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean|UrlTree> {\r\n        this.authService.getLogger().verbose(\"Guard - canActivate\");\r\n        return this.activateHelper(state);\r\n    }\r\n\r\n    canActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean|UrlTree> {\r\n        this.authService.getLogger().verbose(\"Guard - canActivateChild\");\r\n        return this.activateHelper(state);\r\n    }\r\n\r\n    canLoad(): Observable<boolean> {\r\n        this.authService.getLogger().verbose(\"Guard - canLoad\");\r\n        // @ts-ignore\r\n        return this.activateHelper();\r\n    }\r\n\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport {\r\n    HttpRequest,\r\n    HttpHandler,\r\n    HttpEvent,\r\n    HttpInterceptor\r\n} from \"@angular/common/http\";\r\nimport { Observable, EMPTY, of } from \"rxjs\";\r\nimport { switchMap, catchError } from \"rxjs/operators\";\r\nimport { MsalService } from \"./msal.service\";\r\nimport { AccountInfo, AuthenticationResult, BrowserConfigurationAuthError, InteractionType, StringUtils } from \"@azure/msal-browser\";\r\nimport { Injectable, Inject } from \"@angular/core\";\r\nimport { MSAL_INTERCEPTOR_CONFIG } from \"./constants\";\r\nimport { MsalInterceptorConfiguration } from \"./msal.interceptor.config\";\r\n\r\n@Injectable()\r\nexport class MsalInterceptor implements HttpInterceptor {\r\n    constructor(\r\n        @Inject(MSAL_INTERCEPTOR_CONFIG) private msalInterceptorConfig: MsalInterceptorConfiguration,\r\n        private authService: MsalService\r\n    ) {}\r\n\r\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        if (this.msalInterceptorConfig.interactionType !== InteractionType.Popup && this.msalInterceptorConfig.interactionType !== InteractionType.Redirect) {\r\n            throw new BrowserConfigurationAuthError(\"invalid_interaction_type\", \"Invalid interaction type provided to MSAL Interceptor. InteractionType.Popup, InteractionType.Redirect must be provided in the msalInterceptorConfiguration\");\r\n        }\r\n\r\n        this.authService.getLogger().verbose(\"MSAL Interceptor activated\");\r\n        const scopes = this.getScopesForEndpoint(req.url);\r\n\r\n        // Sets account as active account or first account\r\n        let account: AccountInfo;\r\n        if (!!this.authService.instance.getActiveAccount()) {\r\n            this.authService.getLogger().verbose(\"Interceptor - active account selected\");\r\n            account = this.authService.instance.getActiveAccount();\r\n        } else {\r\n            this.authService.getLogger().verbose(\"Interceptor - no active account, fallback to first account\");\r\n            account = this.authService.instance.getAllAccounts()[0];\r\n        }\r\n\r\n        // If no scopes for endpoint, does not acquire token\r\n        if (!scopes || scopes.length === 0) {\r\n            this.authService.getLogger().verbose(\"Interceptor - no scopes for endpoint\");\r\n            return next.handle(req);\r\n        }\r\n\r\n        this.authService.getLogger().info(`Interceptor - ${scopes.length} scopes found for endpoint`);\r\n        this.authService.getLogger().infoPii(`Interceptor - [${scopes}] scopes found for ${req.url}`);\r\n\r\n        // Note: For MSA accounts, include openid scope when calling acquireTokenSilent to return idToken\r\n        return this.authService.acquireTokenSilent({...this.msalInterceptorConfig.authRequest, scopes, account})\r\n            .pipe(\r\n                catchError(() => {\r\n                    this.authService.getLogger().error(\"Interceptor - acquireTokenSilent rejected with error. Invoking interaction to resolve.\");\r\n                    return this.acquireTokenInteractively(scopes);\r\n                }),\r\n                switchMap((result: AuthenticationResult)  => {\r\n                    if (!result.accessToken) {\r\n                        this.authService.getLogger().error(\"Interceptor - acquireTokenSilent resolved with null access token. Known issue with B2C tenants, invoking interaction to resolve.\");\r\n                        return this.acquireTokenInteractively(scopes);\r\n                    }\r\n                    return of(result);\r\n                }),\r\n                switchMap((result: AuthenticationResult) => {\r\n                    this.authService.getLogger().verbose(\"Interceptor - setting authorization headers\");\r\n                    const headers = req.headers\r\n                        .set(\"Authorization\", `Bearer ${result.accessToken}`);\r\n\r\n                    const requestClone = req.clone({headers});\r\n                    return next.handle(requestClone);\r\n                })\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Invoke interaction for the given set of scopes\r\n     * @param scopes Array of scopes for the request\r\n     * @returns Result from the interactive request\r\n     */\r\n    private acquireTokenInteractively(scopes: string[]): Observable<AuthenticationResult> {\r\n        if (this.msalInterceptorConfig.interactionType === InteractionType.Popup) {\r\n            this.authService.getLogger().verbose(\"Interceptor - error acquiring token silently, acquiring by popup\");\r\n            return this.authService.acquireTokenPopup({...this.msalInterceptorConfig.authRequest, scopes});\r\n        }\r\n        this.authService.getLogger().verbose(\"Interceptor - error acquiring token silently, acquiring by redirect\");\r\n        const redirectStartPage = window.location.href;\r\n        this.authService.acquireTokenRedirect({...this.msalInterceptorConfig.authRequest, scopes, redirectStartPage});\r\n        return EMPTY;\r\n    }\r\n\r\n    /**\r\n     * Looks up the scopes for the given endpoint from the protectedResourceMap\r\n     * @param endpoint Url of the request\r\n     * @returns Array of scopes, or null if not found\r\n     *\r\n     */\r\n    private getScopesForEndpoint(endpoint: string): Array<string>|null {\r\n        this.authService.getLogger().verbose(\"Interceptor - getting scopes for endpoint\");\r\n        const protectedResourcesArray = Array.from(this.msalInterceptorConfig.protectedResourceMap.keys());\r\n        const keyMatchesEndpointArray = protectedResourcesArray.filter(key => {\r\n            return StringUtils.matchPattern(key, endpoint);\r\n        });\r\n\r\n        // Process all protected resources and send the first matched resource\r\n        if (keyMatchesEndpointArray.length > 0) {\r\n            const keyForEndpoint = keyMatchesEndpointArray[0];\r\n            if (keyForEndpoint) {\r\n                return this.msalInterceptorConfig.protectedResourceMap.get(keyForEndpoint);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Inject, Injectable } from \"@angular/core\";\r\nimport { Observable, Subject } from \"rxjs\";\r\nimport { MSAL_INSTANCE } from \"./constants\";\r\nimport { EventMessage, EventMessageUtils, IPublicClientApplication, InteractionStatus } from \"@azure/msal-browser\";\r\n\r\n@Injectable()\r\nexport class MsalBroadcastService {\r\n    private _msalSubject: Subject<EventMessage>;\r\n    public msalSubject$: Observable<EventMessage>;\r\n    private _inProgress: Subject<InteractionStatus>;\r\n    public inProgress$: Observable<InteractionStatus>;\r\n\r\n    constructor(\r\n        @Inject(MSAL_INSTANCE) private msalInstance: IPublicClientApplication\r\n    ) {\r\n        this._msalSubject = new Subject<EventMessage>();\r\n        this.msalSubject$  = this._msalSubject.asObservable();\r\n        this._inProgress = new Subject<InteractionStatus>();\r\n        this.inProgress$ = this._inProgress.asObservable();\r\n        this.msalInstance.addEventCallback((message: EventMessage) => {\r\n            this._msalSubject.next(message);\r\n            const status = EventMessageUtils.getInteractionStatusFromEvent(message);\r\n            if (status !== null) {\r\n                this.msalInstance.getLogger().verbose(`BroadcastService - ${message.eventType} results in setting inProgress to ${status}`);\r\n                this._inProgress.next(status);\r\n            }\r\n        });\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ModuleWithProviders, NgModule } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { IPublicClientApplication } from \"@azure/msal-browser\";\r\nimport { MsalGuardConfiguration } from \"./msal.guard.config\";\r\nimport { MsalInterceptorConfiguration } from \"./msal.interceptor.config\";\r\nimport { MsalGuard } from \"./msal.guard\";\r\nimport { MsalBroadcastService } from \"./msal.broadcast.service\";\r\nimport { MsalService } from \"./msal.service\";\r\nimport { MSAL_INSTANCE , MSAL_GUARD_CONFIG, MSAL_INTERCEPTOR_CONFIG } from \"./constants\";\r\n\r\n@NgModule({\r\n    declarations: [],\r\n    imports: [\r\n        CommonModule\r\n    ],\r\n    providers: [\r\n        MsalGuard,\r\n        MsalBroadcastService\r\n    ]\r\n})\r\nexport class MsalModule {\r\n    static forRoot(\r\n        msalInstance: IPublicClientApplication,\r\n        guardConfig: MsalGuardConfiguration,\r\n        interceptorConfig: MsalInterceptorConfiguration\r\n    ): ModuleWithProviders<MsalModule> {\r\n        return {\r\n            ngModule: MsalModule,\r\n            providers: [\r\n                {\r\n                    provide: MSAL_INSTANCE,\r\n                    useValue: msalInstance\r\n                },\r\n                {\r\n                    provide: MSAL_GUARD_CONFIG,\r\n                    useValue: guardConfig\r\n                },\r\n                {\r\n                    provide: MSAL_INTERCEPTOR_CONFIG,\r\n                    useValue: interceptorConfig\r\n                },\r\n                MsalService\r\n            ]\r\n        };\r\n    }\r\n\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\n/**\r\n * This is a dedicated redirect component to be added to Angular apps to \r\n * handle redirects when using @azure/msal-angular.\r\n * Import this component to use redirects in your app.\r\n */\r\n\r\nimport { Component, OnInit } from \"@angular/core\";\r\nimport { MsalService } from \"./msal.service\";\r\n\r\n@Component({\r\n    selector: \"app-redirect\",\r\n    template: \"\"\r\n})\r\nexport class MsalRedirectComponent implements OnInit {\r\n\r\n    constructor(private authService: MsalService) { }\r\n\r\n    ngOnInit(): void {    \r\n        this.authService.handleRedirectObservable().subscribe();\r\n    }\r\n\r\n}\r\n"]}