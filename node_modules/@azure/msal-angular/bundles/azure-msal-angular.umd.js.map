{"version":3,"file":"azure-msal-angular.umd.js","sources":["../../src/constants.ts","../../src/packageMetadata.ts","../../src/msal.service.ts","../../src/msal.guard.ts","../../src/msal.interceptor.ts","../../src/msal.broadcast.service.ts","../../src/msal.module.ts","../../src/msal.redirect.component.ts","../../src/public-api.ts","../../src/azure-msal-angular.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { InjectionToken } from \"@angular/core\";\r\n\r\nexport const MSAL_INSTANCE = new InjectionToken<string>(\"MSAL_INSTANCE\");\r\n\r\nexport const MSAL_GUARD_CONFIG = new InjectionToken<string>(\"MSAL_GUARD_CONFIG\");\r\n\r\nexport const MSAL_INTERCEPTOR_CONFIG = new InjectionToken<string>(\"MSAL_INTERCEPTOR_CONFIG\");\r\n","/* eslint-disable header/header */\nexport const name = \"@azure/msal-angular\";\nexport const version = \"2.0.0-alpha.6\";\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Inject, Injectable } from \"@angular/core\";\r\nimport { Location } from \"@angular/common\";\r\nimport {\r\n    IPublicClientApplication,\r\n    EndSessionRequest,\r\n    AuthenticationResult,\r\n    RedirectRequest,\r\n    SilentRequest,\r\n    PopupRequest,\r\n    SsoSilentRequest,\r\n    Logger,\r\n    WrapperSKU\r\n} from \"@azure/msal-browser\";\r\nimport { MSAL_INSTANCE } from \"./constants\";\r\nimport { Observable, from } from \"rxjs\";\r\nimport { IMsalService } from \"./IMsalService\";\r\nimport { name, version } from \"./packageMetadata\";\r\n\r\n@Injectable()\r\nexport class MsalService implements IMsalService {\r\n    private redirectHash: string;\r\n    private logger: Logger;\r\n\r\n    constructor(\r\n        @Inject(MSAL_INSTANCE) public instance: IPublicClientApplication,\r\n        private location: Location\r\n    ) {\r\n        const hash = this.location.path(true).split(\"#\").pop();\r\n        if (hash) {\r\n            this.redirectHash = `#${hash}`;\r\n        }\r\n        this.instance.initializeWrapperLibrary(WrapperSKU.Angular, version);\r\n    }\r\n\r\n    acquireTokenPopup(request: PopupRequest): Observable<AuthenticationResult> {\r\n        return from(this.instance.acquireTokenPopup(request));\r\n    }\r\n    acquireTokenRedirect(request: RedirectRequest): Observable<void> {\r\n        return from(this.instance.acquireTokenRedirect(request));\r\n    }\r\n    acquireTokenSilent(silentRequest: SilentRequest): Observable<AuthenticationResult> {\r\n        return from(this.instance.acquireTokenSilent(silentRequest));\r\n    }\r\n    handleRedirectObservable(): Observable<AuthenticationResult> {\r\n        const handleRedirect = from(this.instance.handleRedirectPromise(this.redirectHash));\r\n        this.redirectHash = \"\";\r\n        return handleRedirect;\r\n    }\r\n    loginPopup(request?: PopupRequest): Observable<AuthenticationResult> {\r\n        return from(this.instance.loginPopup(request));\r\n    }\r\n    loginRedirect(request?: RedirectRequest): Observable<void> {\r\n        return from(this.instance.loginRedirect(request));\r\n    }\r\n    logout(logoutRequest?: EndSessionRequest): Observable<void> {\r\n        return from(this.instance.logout(logoutRequest));\r\n    }\r\n    ssoSilent(request: SsoSilentRequest): Observable<AuthenticationResult> {\r\n        return from(this.instance.ssoSilent(request));\r\n    }\r\n    /**\r\n     * Gets logger for msal-angular.\r\n     * If no logger set, returns logger instance created with same options as msal-browser\r\n     */\r\n    getLogger(): Logger {\r\n        if (!this.logger) {\r\n            this.logger = this.instance.getLogger().clone(name, version);\r\n        }\r\n        return this.logger;\r\n    }\r\n    // Create a logger instance for msal-angular with the same options as msal-browser\r\n    setLogger(logger: Logger): void {\r\n        this.logger = logger.clone(name, version);\r\n        this.instance.setLogger(logger);\r\n    }\r\n\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, CanActivateChild, CanLoad, UrlTree, Router } from \"@angular/router\";\r\nimport { MsalService } from \"./msal.service\";\r\nimport { Injectable, Inject, VERSION } from \"@angular/core\";\r\nimport { Location } from \"@angular/common\";\r\nimport { InteractionType, BrowserConfigurationAuthError, BrowserUtils, UrlString, PopupRequest, RedirectRequest, AuthenticationResult } from \"@azure/msal-browser\";\r\nimport { MsalGuardConfiguration } from \"./msal.guard.config\";\r\nimport { MSAL_GUARD_CONFIG } from \"./constants\";\r\nimport { concatMap, catchError, map } from \"rxjs/operators\";\r\nimport { Observable, of } from \"rxjs\";\r\n\r\n@Injectable()\r\nexport class MsalGuard implements CanActivate, CanActivateChild, CanLoad {\r\n    private loginFailedRoute?: UrlTree;\r\n\r\n    constructor(\r\n        @Inject(MSAL_GUARD_CONFIG) private msalGuardConfig: MsalGuardConfiguration,\r\n        private authService: MsalService,\r\n        private location: Location,\r\n        private router: Router\r\n    ) { }\r\n\r\n    /**\r\n     * Parses url string to UrlTree\r\n     * @param url \r\n     */\r\n    parseUrl(url: string): UrlTree {\r\n        return this.router.parseUrl(url);\r\n    }\r\n\r\n    /**\r\n     * Builds the absolute url for the destination page\r\n     * @param path Relative path of requested page\r\n     * @returns Full destination url\r\n     */\r\n    getDestinationUrl(path: string): string {\r\n        this.authService.getLogger().verbose(\"Guard - getting destination url\");\r\n        // Absolute base url for the application (default to origin if base element not present)\r\n        const baseElements = document.getElementsByTagName(\"base\");\r\n        const baseUrl = this.location.normalize(baseElements.length ? baseElements[0].href : window.location.origin);\r\n\r\n        // Path of page (including hash, if using hash routing)\r\n        const pathUrl = this.location.prepareExternalUrl(path);\r\n\r\n        // Hash location strategy\r\n        if (pathUrl.startsWith(\"#\")) {\r\n            this.authService.getLogger().verbose(\"Guard - destination by hash routing\");\r\n            return `${baseUrl}/${pathUrl}`;\r\n        }\r\n\r\n        /*\r\n         * If using path location strategy, pathUrl will include the relative portion of the base path (e.g. /base/page).\r\n         * Since baseUrl also includes /base, can just concatentate baseUrl + path\r\n         */\r\n        return `${baseUrl}${path}`;\r\n    }\r\n\r\n    /**\r\n     * Interactively prompt the user to login\r\n     * @param url Path of the requested page\r\n     */\r\n    private loginInteractively(url: string): Observable<boolean> {\r\n        if (this.msalGuardConfig.interactionType === InteractionType.Popup) {\r\n            this.authService.getLogger().verbose(\"Guard - logging in by popup\");\r\n            return this.authService.loginPopup({ ...this.msalGuardConfig.authRequest } as PopupRequest)\r\n                .pipe(\r\n                    map((response: AuthenticationResult) => {\r\n                        this.authService.getLogger().verbose(\"Guard - login by popup successful, can activate, setting active account\");\r\n                        this.authService.instance.setActiveAccount(response.account);\r\n                        return true;\r\n                    })\r\n                );\r\n        }\r\n\r\n        this.authService.getLogger().verbose(\"Guard - logging in by redirect\");\r\n        const redirectStartPage = this.getDestinationUrl(url);\r\n        return this.authService.loginRedirect({\r\n            redirectStartPage,\r\n            ...this.msalGuardConfig.authRequest\r\n        } as RedirectRequest)\r\n            .pipe(\r\n                map(() => false)\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Helper which checks for the correct interaction type, prevents page with Guard to be set as reidrect, and calls handleRedirectObservable\r\n     * @param state \r\n     */\r\n    private activateHelper(state?: RouterStateSnapshot): Observable<boolean|UrlTree> {\r\n        if (this.msalGuardConfig.interactionType !== InteractionType.Popup && this.msalGuardConfig.interactionType !== InteractionType.Redirect) {\r\n            throw new BrowserConfigurationAuthError(\"invalid_interaction_type\", \"Invalid interaction type provided to MSAL Guard. InteractionType.Popup or InteractionType.Redirect must be provided in the MsalGuardConfiguration\");\r\n        }\r\n        this.authService.getLogger().verbose(\"MSAL Guard activated\");\r\n\r\n        /*\r\n         * If a page with MSAL Guard is set as the redirect for acquireTokenSilent,\r\n         * short-circuit to prevent redirecting or popups.\r\n         * TODO: Update to allow running in iframe once allowRedirectInIframe is implemented\r\n         */\r\n        if (UrlString.hashContainsKnownProperties(window.location.hash) && BrowserUtils.isInIframe()) {\r\n            this.authService.getLogger().warning(\"Guard - redirectUri set to page with MSAL Guard. It is recommended to not set redirectUri to a page that requires authentication.\");\r\n            return of(false);\r\n        }\r\n\r\n        /**\r\n         * If a loginFailedRoute is set in the config, set this as the loginFailedRoute\r\n         */\r\n        if (this.msalGuardConfig.loginFailedRoute) {\r\n            this.loginFailedRoute = this.parseUrl(this.msalGuardConfig.loginFailedRoute);\r\n        }\r\n\r\n        return this.authService.handleRedirectObservable()\r\n            .pipe(\r\n                concatMap(() => {\r\n                    if (!this.authService.instance.getAllAccounts().length) {\r\n                        if (state) {\r\n                            this.authService.getLogger().verbose(\"Guard - no accounts retrieved, log in required to activate\");\r\n                            return this.loginInteractively(state.url);\r\n                        } \r\n                        this.authService.getLogger().verbose(\"Guard - no accounts retrieved, no state, cannot load\");\r\n                        return of(false);\r\n                    }\r\n                    this.authService.getLogger().verbose(\"Guard - account retrieved, can activate or load\");\r\n                    return of(true);\r\n                }),\r\n                catchError(() => {\r\n                    this.authService.getLogger().verbose(\"Guard - error while logging in, unable to activate\");\r\n                    /**\r\n                     * If a loginFailedRoute is set, checks to see if Angular 10+ is used and state is passed in before returning route\r\n                     * Apps using Angular 9 will receive of(false) in canLoad interface, as it does not support UrlTree return types\r\n                     */\r\n                    if (this.loginFailedRoute && parseInt(VERSION.major, 10) > 9 && state) {\r\n                        this.authService.getLogger().verbose(\"Guard - loginFailedRoute set, redirecting\");\r\n                        return of(this.loginFailedRoute);\r\n                    }\r\n                    return of(false);\r\n                })\r\n            );\r\n    }\r\n\r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean|UrlTree> {\r\n        this.authService.getLogger().verbose(\"Guard - canActivate\");\r\n        return this.activateHelper(state);\r\n    }\r\n\r\n    canActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean|UrlTree> {\r\n        this.authService.getLogger().verbose(\"Guard - canActivateChild\");\r\n        return this.activateHelper(state);\r\n    }\r\n\r\n    canLoad(): Observable<boolean> {\r\n        this.authService.getLogger().verbose(\"Guard - canLoad\");\r\n        // @ts-ignore\r\n        return this.activateHelper();\r\n    }\r\n\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport {\r\n    HttpRequest,\r\n    HttpHandler,\r\n    HttpEvent,\r\n    HttpInterceptor\r\n} from \"@angular/common/http\";\r\nimport { Observable, EMPTY, of } from \"rxjs\";\r\nimport { switchMap, catchError } from \"rxjs/operators\";\r\nimport { MsalService } from \"./msal.service\";\r\nimport { AccountInfo, AuthenticationResult, BrowserConfigurationAuthError, InteractionType, StringUtils } from \"@azure/msal-browser\";\r\nimport { Injectable, Inject } from \"@angular/core\";\r\nimport { MSAL_INTERCEPTOR_CONFIG } from \"./constants\";\r\nimport { MsalInterceptorConfiguration } from \"./msal.interceptor.config\";\r\n\r\n@Injectable()\r\nexport class MsalInterceptor implements HttpInterceptor {\r\n    constructor(\r\n        @Inject(MSAL_INTERCEPTOR_CONFIG) private msalInterceptorConfig: MsalInterceptorConfiguration,\r\n        private authService: MsalService\r\n    ) {}\r\n\r\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        if (this.msalInterceptorConfig.interactionType !== InteractionType.Popup && this.msalInterceptorConfig.interactionType !== InteractionType.Redirect) {\r\n            throw new BrowserConfigurationAuthError(\"invalid_interaction_type\", \"Invalid interaction type provided to MSAL Interceptor. InteractionType.Popup, InteractionType.Redirect must be provided in the msalInterceptorConfiguration\");\r\n        }\r\n\r\n        this.authService.getLogger().verbose(\"MSAL Interceptor activated\");\r\n        const scopes = this.getScopesForEndpoint(req.url);\r\n\r\n        // Sets account as active account or first account\r\n        let account: AccountInfo;\r\n        if (!!this.authService.instance.getActiveAccount()) {\r\n            this.authService.getLogger().verbose(\"Interceptor - active account selected\");\r\n            account = this.authService.instance.getActiveAccount();\r\n        } else {\r\n            this.authService.getLogger().verbose(\"Interceptor - no active account, fallback to first account\");\r\n            account = this.authService.instance.getAllAccounts()[0];\r\n        }\r\n\r\n        // If no scopes for endpoint, does not acquire token\r\n        if (!scopes || scopes.length === 0) {\r\n            this.authService.getLogger().verbose(\"Interceptor - no scopes for endpoint\");\r\n            return next.handle(req);\r\n        }\r\n\r\n        this.authService.getLogger().info(`Interceptor - ${scopes.length} scopes found for endpoint`);\r\n        this.authService.getLogger().infoPii(`Interceptor - [${scopes}] scopes found for ${req.url}`);\r\n\r\n        // Note: For MSA accounts, include openid scope when calling acquireTokenSilent to return idToken\r\n        return this.authService.acquireTokenSilent({...this.msalInterceptorConfig.authRequest, scopes, account})\r\n            .pipe(\r\n                catchError(() => {\r\n                    this.authService.getLogger().error(\"Interceptor - acquireTokenSilent rejected with error. Invoking interaction to resolve.\");\r\n                    return this.acquireTokenInteractively(scopes);\r\n                }),\r\n                switchMap((result: AuthenticationResult)  => {\r\n                    if (!result.accessToken) {\r\n                        this.authService.getLogger().error(\"Interceptor - acquireTokenSilent resolved with null access token. Known issue with B2C tenants, invoking interaction to resolve.\");\r\n                        return this.acquireTokenInteractively(scopes);\r\n                    }\r\n                    return of(result);\r\n                }),\r\n                switchMap((result: AuthenticationResult) => {\r\n                    this.authService.getLogger().verbose(\"Interceptor - setting authorization headers\");\r\n                    const headers = req.headers\r\n                        .set(\"Authorization\", `Bearer ${result.accessToken}`);\r\n\r\n                    const requestClone = req.clone({headers});\r\n                    return next.handle(requestClone);\r\n                })\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Invoke interaction for the given set of scopes\r\n     * @param scopes Array of scopes for the request\r\n     * @returns Result from the interactive request\r\n     */\r\n    private acquireTokenInteractively(scopes: string[]): Observable<AuthenticationResult> {\r\n        if (this.msalInterceptorConfig.interactionType === InteractionType.Popup) {\r\n            this.authService.getLogger().verbose(\"Interceptor - error acquiring token silently, acquiring by popup\");\r\n            return this.authService.acquireTokenPopup({...this.msalInterceptorConfig.authRequest, scopes});\r\n        }\r\n        this.authService.getLogger().verbose(\"Interceptor - error acquiring token silently, acquiring by redirect\");\r\n        const redirectStartPage = window.location.href;\r\n        this.authService.acquireTokenRedirect({...this.msalInterceptorConfig.authRequest, scopes, redirectStartPage});\r\n        return EMPTY;\r\n    }\r\n\r\n    /**\r\n     * Looks up the scopes for the given endpoint from the protectedResourceMap\r\n     * @param endpoint Url of the request\r\n     * @returns Array of scopes, or null if not found\r\n     *\r\n     */\r\n    private getScopesForEndpoint(endpoint: string): Array<string>|null {\r\n        this.authService.getLogger().verbose(\"Interceptor - getting scopes for endpoint\");\r\n        const protectedResourcesArray = Array.from(this.msalInterceptorConfig.protectedResourceMap.keys());\r\n        const keyMatchesEndpointArray = protectedResourcesArray.filter(key => {\r\n            return StringUtils.matchPattern(key, endpoint);\r\n        });\r\n\r\n        // Process all protected resources and send the first matched resource\r\n        if (keyMatchesEndpointArray.length > 0) {\r\n            const keyForEndpoint = keyMatchesEndpointArray[0];\r\n            if (keyForEndpoint) {\r\n                return this.msalInterceptorConfig.protectedResourceMap.get(keyForEndpoint);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Inject, Injectable } from \"@angular/core\";\r\nimport { Observable, Subject } from \"rxjs\";\r\nimport { MSAL_INSTANCE } from \"./constants\";\r\nimport { EventMessage, EventMessageUtils, IPublicClientApplication, InteractionStatus } from \"@azure/msal-browser\";\r\n\r\n@Injectable()\r\nexport class MsalBroadcastService {\r\n    private _msalSubject: Subject<EventMessage>;\r\n    public msalSubject$: Observable<EventMessage>;\r\n    private _inProgress: Subject<InteractionStatus>;\r\n    public inProgress$: Observable<InteractionStatus>;\r\n\r\n    constructor(\r\n        @Inject(MSAL_INSTANCE) private msalInstance: IPublicClientApplication\r\n    ) {\r\n        this._msalSubject = new Subject<EventMessage>();\r\n        this.msalSubject$  = this._msalSubject.asObservable();\r\n        this._inProgress = new Subject<InteractionStatus>();\r\n        this.inProgress$ = this._inProgress.asObservable();\r\n        this.msalInstance.addEventCallback((message: EventMessage) => {\r\n            this._msalSubject.next(message);\r\n            const status = EventMessageUtils.getInteractionStatusFromEvent(message);\r\n            if (status !== null) {\r\n                this.msalInstance.getLogger().verbose(`BroadcastService - ${message.eventType} results in setting inProgress to ${status}`);\r\n                this._inProgress.next(status);\r\n            }\r\n        });\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ModuleWithProviders, NgModule } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { IPublicClientApplication } from \"@azure/msal-browser\";\r\nimport { MsalGuardConfiguration } from \"./msal.guard.config\";\r\nimport { MsalInterceptorConfiguration } from \"./msal.interceptor.config\";\r\nimport { MsalGuard } from \"./msal.guard\";\r\nimport { MsalBroadcastService } from \"./msal.broadcast.service\";\r\nimport { MsalService } from \"./msal.service\";\r\nimport { MSAL_INSTANCE , MSAL_GUARD_CONFIG, MSAL_INTERCEPTOR_CONFIG } from \"./constants\";\r\n\r\n@NgModule({\r\n    declarations: [],\r\n    imports: [\r\n        CommonModule\r\n    ],\r\n    providers: [\r\n        MsalGuard,\r\n        MsalBroadcastService\r\n    ]\r\n})\r\nexport class MsalModule {\r\n    static forRoot(\r\n        msalInstance: IPublicClientApplication,\r\n        guardConfig: MsalGuardConfiguration,\r\n        interceptorConfig: MsalInterceptorConfiguration\r\n    ): ModuleWithProviders<MsalModule> {\r\n        return {\r\n            ngModule: MsalModule,\r\n            providers: [\r\n                {\r\n                    provide: MSAL_INSTANCE,\r\n                    useValue: msalInstance\r\n                },\r\n                {\r\n                    provide: MSAL_GUARD_CONFIG,\r\n                    useValue: guardConfig\r\n                },\r\n                {\r\n                    provide: MSAL_INTERCEPTOR_CONFIG,\r\n                    useValue: interceptorConfig\r\n                },\r\n                MsalService\r\n            ]\r\n        };\r\n    }\r\n\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\n/**\r\n * This is a dedicated redirect component to be added to Angular apps to \r\n * handle redirects when using @azure/msal-angular.\r\n * Import this component to use redirects in your app.\r\n */\r\n\r\nimport { Component, OnInit } from \"@angular/core\";\r\nimport { MsalService } from \"./msal.service\";\r\n\r\n@Component({\r\n    selector: \"app-redirect\",\r\n    template: \"\"\r\n})\r\nexport class MsalRedirectComponent implements OnInit {\r\n\r\n    constructor(private authService: MsalService) { }\r\n\r\n    ngOnInit(): void {    \r\n        this.authService.handleRedirectObservable().subscribe();\r\n    }\r\n\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\n/**\r\n * @packageDocumentation\r\n * @module @azure/msal-angular\r\n */\r\n\r\nexport { MsalService } from \"./msal.service\";\r\nexport { IMsalService } from \"./IMsalService\";\r\nexport { MsalGuard } from \"./msal.guard\";\r\nexport { MsalGuardConfiguration } from \"./msal.guard.config\";\r\nexport { MsalInterceptor } from \"./msal.interceptor\";\r\nexport { MsalInterceptorConfiguration } from \"./msal.interceptor.config\";\r\nexport { MSAL_INSTANCE, MSAL_GUARD_CONFIG, MSAL_INTERCEPTOR_CONFIG } from \"./constants\";\r\nexport { MsalBroadcastService } from \"./msal.broadcast.service\";\r\nexport { MsalModule } from \"./msal.module\";\r\nexport { MsalRedirectComponent } from \"./msal.redirect.component\";\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["InjectionToken","WrapperSKU","from","Injectable","Inject","Location","InteractionType","map","BrowserConfigurationAuthError","UrlString","BrowserUtils","of","concatMap","catchError","VERSION","Router","switchMap","EMPTY","StringUtils","Subject","EventMessageUtils","NgModule","CommonModule","Component"],"mappings":"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"}